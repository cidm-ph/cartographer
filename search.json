[{"path":"https://cidm-ph.github.io/cartographer/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Western Sydney Local Health District, NSW Health Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cidm-ph.github.io/cartographer/articles/registering_maps.html","id":"general-guidelines","dir":"Articles","previous_headings":"","what":"General guidelines","title":"Registering map data with 'cartographer'","text":"source dataset needs transformed sf data frame. sf::read_sf() can ingest many popular spatial data formats Make use usethis::use_data_raw() usethis::use_data() prepare data. package need inform cartographer data calling register_map(). needs happen package loaded, base::.onLoad() hook appropriate place: hook needs come last package evaluated, convention include file called R/zzz.R, normally alphabetically last. registration least include map data name column labels features. can also contain alias mapping alternative names abbreviations places plausibly appear datasets.","code":"# in R/zzz.R .onLoad <- function(libname, pkgname) {    cartographer::register_map(      \"my_package.uk\",      data = rnaturalearth::ne_states(country = \"united kingdom\", returnclass = \"sf\"),      feature_column = \"name_en\",      outline = rnaturalearth::ne_countries(        country = \"united kingdom\", returnclass = \"sf\", scale = \"large\"      )    ) }"},{"path":"https://cidm-ph.github.io/cartographer/articles/registering_maps.html","id":"reducing-file-size","dir":"Articles","previous_headings":"","what":"Reducing file size","title":"Registering map data with 'cartographer'","text":"Spatial datasets can often quite large contain high resolution data. can especially problem attempting commit data git publish package CRAN (1 MB soft limit total compressed size packages). Consider removing extra columns spatial dataset geometry column name column remain. useful pattern reduce size simplify geometry specified resolution: See documentation equidistant cylindrical projection details configuration. may also wish remove holes features:","code":"# Preserve the original coordinate reference system. crs_orig <- sf::st_crs(high_res_sf_data_frame)  # Convert to a more suitable CRS for manipulation. Note that the lat_ts argument # here is the \"latitude of true scale\", i.e. the latitude at which scale will be # the least distorted. Adjust this based on your data. crs_working <- sf::st_crs(\"+proj=eqc +lat_ts=34 units=m\")  # Choose a resolution: features smaller than this scale will be lost. tolerance_m <- 1000L  low_res <- high_res_sf_data_frame |>   sf::st_transform(crs_working) |>   sf::st_simplify(dTolerance = tolerance_m) |>   sf::st_transform(crs_orig)  # Compare the size after reducing the resolution: object.size(high_res_sf_data_frame) object.size(low_res) new_geom <- geom |>   sf::st_transform(crs_working) |>   sf::st_union() |>   nngeo::st_remove_holes() |>   sf::st_make_valid()"},{"path":"https://cidm-ph.github.io/cartographer/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Carl Suster. Author, maintainer. Western Sydney Local Health District, NSW Health. Copyright holder.","code":""},{"path":"https://cidm-ph.github.io/cartographer/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Suster C (2023). cartographer: Turn Place Names Map Data. https://github.com/cidm-ph/cartographer, https://cidm-ph.github.io/cartographer/.","code":"@Manual{,   title = {cartographer: Turn Place Names into Map Data},   author = {Carl Suster},   year = {2023},   note = {https://github.com/cidm-ph/cartographer, https://cidm-ph.github.io/cartographer/}, }"},{"path":"https://cidm-ph.github.io/cartographer/index.html","id":"cartographer","dir":"","previous_headings":"","what":"Turn Place Names into Map Data","title":"Turn Place Names into Map Data","text":"list place/region names (example column data frame) ’d like turn spatial data, cartographer can help. 2 steps: Register spatial data cartographer using register_map(), load package already . Use add_geometry() turn ordinary data frame spatial one. cartographer complains doesn’t recognise place names, can handle aliases, example abbreviated state names. See vignette(\"cartographer\") examples, {ggautomap} handy ggplot helpers pull map data using cartographer.","code":""},{"path":"https://cidm-ph.github.io/cartographer/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Turn Place Names into Map Data","text":"can install cartographer like :","code":"# CRAN release install.packages('cartographer')  # development version install.packages('cartographer', repos = c('https://cidm-ph.r-universe.dev', 'https://cloud.r-project.org'))"},{"path":"https://cidm-ph.github.io/cartographer/index.html","id":"map-data","dir":"","previous_headings":"","what":"Map data","title":"Turn Place Names into Map Data","text":"packages provide data works cartographer: {maps} - dated example maps world several countries. rnaturalearth - countries states (available). {nswgeo} - maps New South Wales, Australia. Alternatively, can register data using register_map() (see vignette(\"registering_maps\")).","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/add_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert input data frame into a spatial data frame — add_geometry","title":"Convert input data frame into a spatial data frame — add_geometry","text":"Convert input data frame spatial data frame","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/add_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert input data frame into a spatial data frame — add_geometry","text":"","code":"add_geometry(x, location, feature_type = NA, geom_name = \"geometry\")"},{"path":"https://cidm-ph.github.io/cartographer/reference/add_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert input data frame into a spatial data frame — add_geometry","text":"x Data frame feature name column. location Feature names (tidy evaluation). feature_type registered map corresponding values location. NA (default), type guessed values location. geom_name Name new column contain geometry.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/add_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert input data frame into a spatial data frame — add_geometry","text":"spatial data frame containing columns input data frame.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/add_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert input data frame into a spatial data frame — add_geometry","text":"","code":"add_geometry(nc_type_example_2, county) #> The rnaturalearthhires package needs to be installed. #> Installing the rnaturalearthhires package. #> While guessing `feature_type`, cartographer map 'rnaturalearth.countries_hires' #> was skipped because it could not be loaded #> ℹ Specify `feature_type` explicitly to avoid this message if #>   'rnaturalearth.countries_hires' was not the map you intended #> ℹ Error in value[[3L]](cond): Failed to install the rnaturalearthhires package. #>   Please try installing the package for yourself using the following command: #>   devtools::install_github(\"ropensci/rnaturalearthhires\") #> The rnaturalearthhires package needs to be installed. #> Installing the rnaturalearthhires package. #> While guessing `feature_type`, cartographer map 'rnaturalearth.australia' was #> skipped because it could not be loaded #> ℹ Specify `feature_type` explicitly to avoid this message if #>   'rnaturalearth.australia' was not the map you intended #> ℹ Error in value[[3L]](cond): Failed to install the rnaturalearthhires package. #>   Please try installing the package for yourself using the following command: #>   devtools::install_github(\"ropensci/rnaturalearthhires\") #> Simple feature collection with 200 features and 2 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -82.74389 ymin: 35.14903 xmax: -76.69376 ymax: 36.24614 #> Geodetic CRS:  NAD27 #> First 10 features: #>       county type                       geometry #> 1     MARTIN    A MULTIPOLYGON (((-77.17846 3... #> 2   ALAMANCE    B MULTIPOLYGON (((-79.24619 3... #> 3     BERTIE    A MULTIPOLYGON (((-76.78307 3... #> 4    CHATHAM    B MULTIPOLYGON (((-79.55536 3... #> 5    CHATHAM    B MULTIPOLYGON (((-79.55536 3... #> 6  HENDERSON    B MULTIPOLYGON (((-82.57003 3... #> 7     GASTON    B MULTIPOLYGON (((-81.32282 3... #> 8     GASTON    B MULTIPOLYGON (((-81.32282 3... #> 9    LINCOLN    B MULTIPOLYGON (((-80.95677 3... #> 10 HENDERSON    A MULTIPOLYGON (((-82.57003 3..."},{"path":"https://cidm-ph.github.io/cartographer/reference/cartographer-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn Place Names into Map Data — cartographer-package","title":"Turn Place Names into Map Data — cartographer-package","text":"Cartographer framework easily matching spatial data list standardised place names. might data frame came spreadsheet tracking data suburb state. package can convert spatial data frame ready plotting. actual map data provided packages (code) register data cartographer.","code":""},{"path":[]},{"path":"https://cidm-ph.github.io/cartographer/reference/cartographer-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Turn Place Names into Map Data — cartographer-package","text":"Maintainer: Carl Suster Carl.Suster@health.nsw.gov.au (ORCID) contributors: Western Sydney Local Health District, NSW Health [copyright holder]","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/feature_names.html","id":null,"dir":"Reference","previous_headings":"","what":"List known feature names — feature_names","title":"List known feature names — feature_names","text":"gives list feature names part specified map data. list includes aliases defined map registered. Note location column matching case insensitive (see Details ).","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/feature_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List known feature names — feature_names","text":"","code":"feature_names(feature_type)"},{"path":"https://cidm-ph.github.io/cartographer/reference/feature_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List known feature names — feature_names","text":"feature_type Type map feature. See feature_types() list registered types.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/feature_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List known feature names — feature_names","text":"Character vector feature names.","code":""},{"path":[]},{"path":"https://cidm-ph.github.io/cartographer/reference/feature_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List known feature names — feature_names","text":"","code":"head(feature_names(\"sf.nc\")) #> [1] \"Ashe\"        \"Alleghany\"   \"Surry\"       \"Currituck\"   \"Northampton\" #> [6] \"Hertford\""},{"path":"https://cidm-ph.github.io/cartographer/reference/feature_types.html","id":null,"dir":"Reference","previous_headings":"","what":"List known feature types — feature_types","title":"List known feature types — feature_types","text":"feature type corresponds map data registered.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/feature_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List known feature types — feature_types","text":"","code":"feature_types()"},{"path":"https://cidm-ph.github.io/cartographer/reference/feature_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List known feature types — feature_types","text":"Character vector registered feature types.","code":""},{"path":[]},{"path":"https://cidm-ph.github.io/cartographer/reference/feature_types.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List known feature types — feature_types","text":"","code":"feature_types() #>  [1] \"maps.italy\"                    \"rnaturalearth.countries_hires\" #>  [3] \"maps.lakes\"                    \"rnaturalearth.countries\"       #>  [5] \"rnaturalearth.australia\"       \"maps.nz\"                       #>  [7] \"maps.world\"                    \"maps.state\"                    #>  [9] \"sf.nc\"                         \"maps.france\""},{"path":"https://cidm-ph.github.io/cartographer/reference/map_outline.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a map outline registered with cartographer. — map_outline","title":"Retrieve a map outline registered with cartographer. — map_outline","text":"Retrieve map outline registered cartographer.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/map_outline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a map outline registered with cartographer. — map_outline","text":"","code":"map_outline(feature_type)"},{"path":"https://cidm-ph.github.io/cartographer/reference/map_outline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve a map outline registered with cartographer. — map_outline","text":"feature_type Type map feature. See feature_types() list registered types.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/map_outline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a map outline registered with cartographer. — map_outline","text":"map outline registered feature_type. Note outline optional, return NULL none registered.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/map_outline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve a map outline registered with cartographer. — map_outline","text":"","code":"map_outline(\"sf.nc\") #> NULL"},{"path":"https://cidm-ph.github.io/cartographer/reference/map_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve map data registered with cartographer. — map_sf","title":"Retrieve map data registered with cartographer. — map_sf","text":"Retrieve map data registered cartographer.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/map_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve map data registered with cartographer. — map_sf","text":"","code":"map_sf(feature_type)"},{"path":"https://cidm-ph.github.io/cartographer/reference/map_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve map data registered with cartographer. — map_sf","text":"feature_type Type map feature. See feature_types() list registered types.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/map_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve map data registered with cartographer. — map_sf","text":"spatial data frame registered feature_type.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/map_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve map data registered with cartographer. — map_sf","text":"","code":"map_sf(\"sf.nc\") #> Simple feature collection with 100 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 #> Geodetic CRS:  NAD27 #> First 10 features: #>     AREA PERIMETER CNTY_ CNTY_ID        NAME  FIPS FIPSNO CRESS_ID BIR74 SID74 #> 1  0.114     1.442  1825    1825        Ashe 37009  37009        5  1091     1 #> 2  0.061     1.231  1827    1827   Alleghany 37005  37005        3   487     0 #> 3  0.143     1.630  1828    1828       Surry 37171  37171       86  3188     5 #> 4  0.070     2.968  1831    1831   Currituck 37053  37053       27   508     1 #> 5  0.153     2.206  1832    1832 Northampton 37131  37131       66  1421     9 #> 6  0.097     1.670  1833    1833    Hertford 37091  37091       46  1452     7 #> 7  0.062     1.547  1834    1834      Camden 37029  37029       15   286     0 #> 8  0.091     1.284  1835    1835       Gates 37073  37073       37   420     0 #> 9  0.118     1.421  1836    1836      Warren 37185  37185       93   968     4 #> 10 0.124     1.428  1837    1837      Stokes 37169  37169       85  1612     1 #>    NWBIR74 BIR79 SID79 NWBIR79                       geometry #> 1       10  1364     0      19 MULTIPOLYGON (((-81.47276 3... #> 2       10   542     3      12 MULTIPOLYGON (((-81.23989 3... #> 3      208  3616     6     260 MULTIPOLYGON (((-80.45634 3... #> 4      123   830     2     145 MULTIPOLYGON (((-76.00897 3... #> 5     1066  1606     3    1197 MULTIPOLYGON (((-77.21767 3... #> 6      954  1838     5    1237 MULTIPOLYGON (((-76.74506 3... #> 7      115   350     2     139 MULTIPOLYGON (((-76.00897 3... #> 8      254   594     2     371 MULTIPOLYGON (((-76.56251 3... #> 9      748  1190     2     844 MULTIPOLYGON (((-78.30876 3... #> 10     160  2038     5     176 MULTIPOLYGON (((-80.02567 3..."},{"path":"https://cidm-ph.github.io/cartographer/reference/map_sfc.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve geometry of a single location. — map_sfc","title":"Retrieve geometry of a single location. — map_sfc","text":"Retrieve geometry single location.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/map_sfc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve geometry of a single location. — map_sfc","text":"","code":"map_sfc(feature_names, feature_type)"},{"path":"https://cidm-ph.github.io/cartographer/reference/map_sfc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve geometry of a single location. — map_sfc","text":"feature_names Name feature(s) retrieve. must exact case-sensitive match, aliases consulted. feature_type Type map feature. See feature_types() list registered types.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/map_sfc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve geometry of a single location. — map_sfc","text":"geometry sfc object.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/map_sfc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve geometry of a single location. — map_sfc","text":"","code":"map_sfc(\"Ashe\", \"sf.nc\") #> Geometry set for 1 feature  #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -81.74107 ymin: 36.23436 xmax: -81.23989 ymax: 36.58965 #> Geodetic CRS:  NAD27 #> MULTIPOLYGON (((-81.47276 36.23436, -81.54084 3... map_sfc(c(\"Craven\", \"Buncombe\"), \"sf.nc\") #> Geometry set for 2 features  #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: -82.88111 ymin: 34.83043 xmax: -76.62562 ymax: 35.8164 #> Geodetic CRS:  NAD27 #> MULTIPOLYGON (((-76.89761 35.25157, -76.94743 3... #> MULTIPOLYGON (((-82.2581 35.46373, -82.32288 35..."},{"path":"https://cidm-ph.github.io/cartographer/reference/nc_type_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Example datasets with a feature name column and random data — nc_type_example_1","title":"Example datasets with a feature name column and random data — nc_type_example_1","text":"dataset contains random data compatible sf.nc example map data illustrating cartographer's features. nc_type_example_1 contains deliberate error county name single row, whereas nc_type_example_2 contains correct data.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/nc_type_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example datasets with a feature name column and random data — nc_type_example_1","text":"","code":"nc_type_example_1  nc_type_example_2"},{"path":"https://cidm-ph.github.io/cartographer/reference/nc_type_example.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example datasets with a feature name column and random data — nc_type_example_1","text":"Objects class data.frame 50 200 rows respectively, 2 columns: county Feature names match NAME field nc dataset type Arbitrary categorical data","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/register_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a new feature type — register_map","title":"Register a new feature type — register_map","text":"adds new feature type can used geoms package. registering another package, occur .onLoad() hook package.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/register_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a new feature type — register_map","text":"","code":"register_map(   feature_type,   data,   feature_column,   aliases = NULL,   outline = NULL,   lazy = TRUE )"},{"path":"https://cidm-ph.github.io/cartographer/reference/register_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a new feature type — register_map","text":"feature_type Name type. registering within package, suggested format \"<package name>.<map name>\" avoid clashes packages. data simple feature data frame map data, function returns data frame. lazy TRUE, value evaluated data first accessed. feature_column Name column data contains feature names. aliases Optional named character vector list maps aliases values appear feature column. allows abbreviations alternative names supported. outline Optional sf geometry containing just outline map, function returning geometry. lazy TRUE, value evaluated data first accessed. lazy TRUE, defer evaluation data outline used.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/register_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a new feature type — register_map","text":"return value; updates global feature registry.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/register_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a new feature type — register_map","text":"Registration supports delayed evaluation (lazy loading). particularly useful larger datasets, loaded memory accessed.","code":""},{"path":[]},{"path":"https://cidm-ph.github.io/cartographer/reference/register_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a new feature type — register_map","text":"","code":"# register a map of the states of Italy from rnaturalearth using the  # Italian names, and providing an outline of the country  register_map(    \"italy\",    data = rnaturalearth::ne_states(country = \"italy\", returnclass = \"sf\"),    feature_column = \"name_it\",    outline = rnaturalearth::ne_countries(country = \"italy\", returnclass = \"sf\", scale = \"large\")  )"},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Canonicalise feature names accounting for aliases and character case — resolve_feature_names","title":"Canonicalise feature names accounting for aliases and character case — resolve_feature_names","text":"Names resolved checking first match using: case sensitive match, case sensitive match using aliases, case insensitive match, case insensitive match using aliases.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Canonicalise feature names accounting for aliases and character case — resolve_feature_names","text":"","code":"resolve_feature_names(feature_names, feature_type, unmatched = \"error\")"},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Canonicalise feature names accounting for aliases and character case — resolve_feature_names","text":"feature_names Character vector feature names data. feature_type Type map feature. See feature_types() list registered types. unmatched Controls behaviour feature_names contains values match registered feature names. Possible values \"error\" throw error \"pass\" return original values unaltered.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Canonicalise feature names accounting for aliases and character case — resolve_feature_names","text":"Character vector canonicalised names.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Canonicalise feature names accounting for aliases and character case — resolve_feature_names","text":"","code":"resolve_feature_names(c(\"LEE\", \"ansoN\"), feature_type = \"sf.nc\") #> [1] \"Lee\"   \"Anson\" resolve_feature_names(c(\"LEE\", \"ansoNe\"), feature_type = \"sf.nc\", unmatched = \"pass\") #> [1] \"Lee\"    \"ansoNe\""},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess the feature type if it was missing — resolve_feature_type","title":"Guess the feature type if it was missing — resolve_feature_type","text":"feature_type provided, simply checks type registered. NA, however, attempt made guess appropriate choice. done comparing example values provided feature_names names registered map datasets. unambiguous match, filled .","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess the feature type if it was missing — resolve_feature_type","text":"","code":"resolve_feature_type(feature_type, feature_names)"},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess the feature type if it was missing — resolve_feature_type","text":"feature_type Type map feature. See feature_types() list registered types. NA, type guessed based values feature_names. feature_names Character vector feature names data. can subset values.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess the feature type if it was missing — resolve_feature_type","text":"resolved feature type scalar character.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Guess the feature type if it was missing — resolve_feature_type","text":"Note requires lazily-loaded datasets loaded, penalty pay convenience.","code":""},{"path":"https://cidm-ph.github.io/cartographer/reference/resolve_feature_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess the feature type if it was missing — resolve_feature_type","text":"","code":"resolve_feature_type(\"sf.nc\") #> [1] \"sf.nc\" resolve_feature_type(NA, feature_names = c(\"ANSON\", \"Stanly\")) #> [1] \"sf.nc\""},{"path":[]},{"path":"https://cidm-ph.github.io/cartographer/news/index.html","id":"cartographer-020","dir":"Changelog","previous_headings":"","what":"cartographer 0.2.0","title":"cartographer 0.2.0","text":"CRAN release: 2023-05-02 Initial CRAN release.","code":""}]
